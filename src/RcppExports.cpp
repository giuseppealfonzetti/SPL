// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_llikFullPool2D
double cpp_llikFullPool2D(Eigen::Map<Eigen::VectorXd> Y, Eigen::Map<Eigen::MatrixXd> X, Eigen::Map<Eigen::MatrixXi> DICT1, Eigen::Map<Eigen::MatrixXi> DICT2, Eigen::Map<Eigen::VectorXd> THETA, const std::string LINK, const int NCAT);
RcppExport SEXP _SPL_cpp_llikFullPool2D(SEXP YSEXP, SEXP XSEXP, SEXP DICT1SEXP, SEXP DICT2SEXP, SEXP THETASEXP, SEXP LINKSEXP, SEXP NCATSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXi> >::type DICT1(DICT1SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXi> >::type DICT2(DICT2SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< const std::string >::type LINK(LINKSEXP);
    Rcpp::traits::input_parameter< const int >::type NCAT(NCATSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_llikFullPool2D(Y, X, DICT1, DICT2, THETA, LINK, NCAT));
    return rcpp_result_gen;
END_RCPP
}
// cpp_grllFullPool2D
Eigen::VectorXd cpp_grllFullPool2D(Eigen::Map<Eigen::VectorXd> Y, Eigen::Map<Eigen::MatrixXd> X, Eigen::Map<Eigen::MatrixXi> DICT1, Eigen::Map<Eigen::MatrixXi> DICT2, Eigen::Map<Eigen::VectorXd> THETA, const std::string LINK, const int NCAT);
RcppExport SEXP _SPL_cpp_grllFullPool2D(SEXP YSEXP, SEXP XSEXP, SEXP DICT1SEXP, SEXP DICT2SEXP, SEXP THETASEXP, SEXP LINKSEXP, SEXP NCATSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXi> >::type DICT1(DICT1SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXi> >::type DICT2(DICT2SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< const std::string >::type LINK(LINKSEXP);
    Rcpp::traits::input_parameter< const int >::type NCAT(NCATSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_grllFullPool2D(Y, X, DICT1, DICT2, THETA, LINK, NCAT));
    return rcpp_result_gen;
END_RCPP
}
// cpp_SA2
Rcpp::List cpp_SA2(Eigen::Map<Eigen::VectorXd> Y, Eigen::Map<Eigen::MatrixXd> X, const std::string LINK, Eigen::Map<Eigen::MatrixXi> DICT1, Eigen::Map<Eigen::MatrixXi> DICT2, Eigen::Map<Eigen::VectorXd> START, const double STEP0, const int SHUFFLER, const double STEP1, const double STEP2, const double STEP3, const int SCHEDULE, const int UPDATE, const int SWITCH, const double AD1, const double AD2, const int PAIRS_PER_ITERATION, const int BURNE, const int MAXE, const bool ISH, const int UPE, const int SEED, const int VERBOSE, const int NCAT);
RcppExport SEXP _SPL_cpp_SA2(SEXP YSEXP, SEXP XSEXP, SEXP LINKSEXP, SEXP DICT1SEXP, SEXP DICT2SEXP, SEXP STARTSEXP, SEXP STEP0SEXP, SEXP SHUFFLERSEXP, SEXP STEP1SEXP, SEXP STEP2SEXP, SEXP STEP3SEXP, SEXP SCHEDULESEXP, SEXP UPDATESEXP, SEXP SWITCHSEXP, SEXP AD1SEXP, SEXP AD2SEXP, SEXP PAIRS_PER_ITERATIONSEXP, SEXP BURNESEXP, SEXP MAXESEXP, SEXP ISHSEXP, SEXP UPESEXP, SEXP SEEDSEXP, SEXP VERBOSESEXP, SEXP NCATSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::string >::type LINK(LINKSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXi> >::type DICT1(DICT1SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXi> >::type DICT2(DICT2SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type START(STARTSEXP);
    Rcpp::traits::input_parameter< const double >::type STEP0(STEP0SEXP);
    Rcpp::traits::input_parameter< const int >::type SHUFFLER(SHUFFLERSEXP);
    Rcpp::traits::input_parameter< const double >::type STEP1(STEP1SEXP);
    Rcpp::traits::input_parameter< const double >::type STEP2(STEP2SEXP);
    Rcpp::traits::input_parameter< const double >::type STEP3(STEP3SEXP);
    Rcpp::traits::input_parameter< const int >::type SCHEDULE(SCHEDULESEXP);
    Rcpp::traits::input_parameter< const int >::type UPDATE(UPDATESEXP);
    Rcpp::traits::input_parameter< const int >::type SWITCH(SWITCHSEXP);
    Rcpp::traits::input_parameter< const double >::type AD1(AD1SEXP);
    Rcpp::traits::input_parameter< const double >::type AD2(AD2SEXP);
    Rcpp::traits::input_parameter< const int >::type PAIRS_PER_ITERATION(PAIRS_PER_ITERATIONSEXP);
    Rcpp::traits::input_parameter< const int >::type BURNE(BURNESEXP);
    Rcpp::traits::input_parameter< const int >::type MAXE(MAXESEXP);
    Rcpp::traits::input_parameter< const bool >::type ISH(ISHSEXP);
    Rcpp::traits::input_parameter< const int >::type UPE(UPESEXP);
    Rcpp::traits::input_parameter< const int >::type SEED(SEEDSEXP);
    Rcpp::traits::input_parameter< const int >::type VERBOSE(VERBOSESEXP);
    Rcpp::traits::input_parameter< const int >::type NCAT(NCATSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_SA2(Y, X, LINK, DICT1, DICT2, START, STEP0, SHUFFLER, STEP1, STEP2, STEP3, SCHEDULE, UPDATE, SWITCH, AD1, AD2, PAIRS_PER_ITERATION, BURNE, MAXE, ISH, UPE, SEED, VERBOSE, NCAT));
    return rcpp_result_gen;
END_RCPP
}
// cpp_shuffle
std::vector<int> cpp_shuffle(std::vector<int> VEC, const int K, const int SEED);
RcppExport SEXP _SPL_cpp_shuffle(SEXP VECSEXP, SEXP KSEXP, SEXP SEEDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type VEC(VECSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type SEED(SEEDSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_shuffle(VEC, K, SEED));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sample
std::vector<int> cpp_sample(std::vector<int> VEC, const int K, const int SEED);
RcppExport SEXP _SPL_cpp_sample(SEXP VECSEXP, SEXP KSEXP, SEXP SEEDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type VEC(VECSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type SEED(SEEDSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sample(VEC, K, SEED));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sample2
std::vector<int> cpp_sample2(std::vector<int> VEC, const int K, const int SEED);
RcppExport SEXP _SPL_cpp_sample2(SEXP VECSEXP, SEXP KSEXP, SEXP SEEDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type VEC(VECSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type SEED(SEEDSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sample2(VEC, K, SEED));
    return rcpp_result_gen;
END_RCPP
}
// cpp_sample3
std::vector<int> cpp_sample3(std::vector<int> VEC, const int K, const int SEED);
RcppExport SEXP _SPL_cpp_sample3(SEXP VECSEXP, SEXP KSEXP, SEXP SEEDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type VEC(VECSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int >::type SEED(SEEDSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_sample3(VEC, K, SEED));
    return rcpp_result_gen;
END_RCPP
}
// cpp_get_dict
Eigen::MatrixXi cpp_get_dict(const std::vector<std::vector<int>> LIST, const int NPAIRS);
RcppExport SEXP _SPL_cpp_get_dict(SEXP LISTSEXP, SEXP NPAIRSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::vector<int>> >::type LIST(LISTSEXP);
    Rcpp::traits::input_parameter< const int >::type NPAIRS(NPAIRSSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_get_dict(LIST, NPAIRS));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SPL_cpp_llikFullPool2D", (DL_FUNC) &_SPL_cpp_llikFullPool2D, 7},
    {"_SPL_cpp_grllFullPool2D", (DL_FUNC) &_SPL_cpp_grllFullPool2D, 7},
    {"_SPL_cpp_SA2", (DL_FUNC) &_SPL_cpp_SA2, 24},
    {"_SPL_cpp_shuffle", (DL_FUNC) &_SPL_cpp_shuffle, 3},
    {"_SPL_cpp_sample", (DL_FUNC) &_SPL_cpp_sample, 3},
    {"_SPL_cpp_sample2", (DL_FUNC) &_SPL_cpp_sample2, 3},
    {"_SPL_cpp_sample3", (DL_FUNC) &_SPL_cpp_sample3, 3},
    {"_SPL_cpp_get_dict", (DL_FUNC) &_SPL_cpp_get_dict, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_SPL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
