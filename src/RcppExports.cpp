// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_llikFullPool2D
double cpp_llikFullPool2D(Eigen::Map<Eigen::VectorXd> Y, Eigen::Map<Eigen::MatrixXd> X, Eigen::Map<Eigen::MatrixXi> DICT1, Eigen::Map<Eigen::MatrixXi> DICT2, Eigen::Map<Eigen::VectorXd> THETA, const std::string LINK, const int NCAT);
RcppExport SEXP _SPL_cpp_llikFullPool2D(SEXP YSEXP, SEXP XSEXP, SEXP DICT1SEXP, SEXP DICT2SEXP, SEXP THETASEXP, SEXP LINKSEXP, SEXP NCATSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXi> >::type DICT1(DICT1SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXi> >::type DICT2(DICT2SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< const std::string >::type LINK(LINKSEXP);
    Rcpp::traits::input_parameter< const int >::type NCAT(NCATSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_llikFullPool2D(Y, X, DICT1, DICT2, THETA, LINK, NCAT));
    return rcpp_result_gen;
END_RCPP
}
// cpp_grllFullPool2D
Eigen::VectorXd cpp_grllFullPool2D(Eigen::Map<Eigen::VectorXd> Y, Eigen::Map<Eigen::MatrixXd> X, Eigen::Map<Eigen::MatrixXi> DICT1, Eigen::Map<Eigen::MatrixXi> DICT2, Eigen::Map<Eigen::VectorXd> THETA, const std::string LINK, const int NCAT);
RcppExport SEXP _SPL_cpp_grllFullPool2D(SEXP YSEXP, SEXP XSEXP, SEXP DICT1SEXP, SEXP DICT2SEXP, SEXP THETASEXP, SEXP LINKSEXP, SEXP NCATSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXi> >::type DICT1(DICT1SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXi> >::type DICT2(DICT2SEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< const std::string >::type LINK(LINKSEXP);
    Rcpp::traits::input_parameter< const int >::type NCAT(NCATSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_grllFullPool2D(Y, X, DICT1, DICT2, THETA, LINK, NCAT));
    return rcpp_result_gen;
END_RCPP
}
// cpp_get_dict
Eigen::MatrixXi cpp_get_dict(const std::vector<std::vector<int>> LIST, const int NPAIRS);
RcppExport SEXP _SPL_cpp_get_dict(SEXP LISTSEXP, SEXP NPAIRSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::vector<int>> >::type LIST(LISTSEXP);
    Rcpp::traits::input_parameter< const int >::type NPAIRS(NPAIRSSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_get_dict(LIST, NPAIRS));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SPL_cpp_llikFullPool2D", (DL_FUNC) &_SPL_cpp_llikFullPool2D, 7},
    {"_SPL_cpp_grllFullPool2D", (DL_FUNC) &_SPL_cpp_grllFullPool2D, 7},
    {"_SPL_cpp_get_dict", (DL_FUNC) &_SPL_cpp_get_dict, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_SPL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
